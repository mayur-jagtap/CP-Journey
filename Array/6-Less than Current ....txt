Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).


my sol:
int* smallerNumbersThanCurrent(int* nums, int numsSize, int* returnSize){
    int count;
    int* output = malloc(numsSize * sizeof(int));
    for(int i=0;i<numsSize;i++){
        count=0;
        for(int j=0;j<numsSize;j++){
            if((i!=j)&& (nums[i]>nums[j])){
                count++;
            }
        }
        output[i] = count;
    }
    *returnSize =numsSize;
    return output;
}


best sol:
int* smallerNumbersThanCurrent(int* nums, int numsSize, int* returnSize){
    int *ret=calloc(numsSize, sizeof(int));
    int *hash=calloc(101, sizeof(int));

    for(int i=0; i<numsSize; i++)
        hash[nums[i]]++;
    
    int prev=hash[0];
    hash[0]=0;
    for(int i=1; i<101; i++){
        int tmp;
        tmp=hash[i];
        hash[i]=prev;
        prev+=tmp;
    }
    
    for(int i=0; i<numsSize; i++)
        ret[i]=hash[nums[i]];
    
    *returnSize=numsSize;
    return ret;
}